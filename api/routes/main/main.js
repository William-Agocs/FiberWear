var express = require('express'), router = express.Router();
const baseURL = "https://www.nautilusdevelopment.ca/api/";

const mysql = require('mysql');
const util = require('util');
const CryptoJS = require("crypto-js");
const multer = require('multer');

const storage = multer.diskStorage({
    destination: function(req, file, cb) {
        cb(null, './uploads/api/');
    },
    filename: function(req, file, cb) {
        cb(null, Date.now() + "_" + file.originalname);
    }
});

const fileFilter = (req, file, cb) => {
    console.log(file.mimetype)
    if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/jpg' || file.mimetype === 'image/png' || file.mimetype === 'text/plain') {
        cb(null, true);
    } else {
        cb(new Error('File type is not allowed.'), false);
    }
}

const upload = multer({
    storage: storage,
    fileFilter: fileFilter
});

var pool = mysql.createPool({
    connectionLimit: 50,
    host: 'mysql1',
    user: 'root',
    password: '9fe0f919743cd92b',
    database: 'base_db',
    timezone: 'utc'
});


/*
=========================== ENDPOINTS =============================

1)  POST    /api/referrals/v1/create_new_user

2)  POST    /api/referrals/v1/authenticate

3)  POST    /api/referrals/v1/change_my_password

4)  POST    /api/referrals/v1/update_user_information

5)  POST    /api/referrals/v1/edit_my_profile

6)  GET     /api/referrals/v1/get_my_profile_data

7)  GET     /api/referrals/v1/get_user_data

8)  GET     /api/referrals/v1/get_all_users_data

9)  GET     /api/referrals/v1/get_admin_data

10)  POST    /api/referrals/v1/update_absences

11)  POST    /api/referrals/v1/upload_photo

12)  POST    /api/referrals/v1/create_referral

13) GET     /api/referrals/v1/get_all_referral_data

14) GET     /api/referrals/v1/get_my_referrals

15) GET     /api/referrals/v1/get_referrals_from_others

16) GET     /api/referrals/v1/get_my_stats

17) POST    /api/referrals/v1/update_customer_information

18) POST    /api/referrals/v1/update_sum_gained

19) POST    /api/referrals/v1/report_to_developer

*/


// Base referrals route

router.get("/v1/", (req, res) => {
    console.log("Responding to root");
    res.send("Hello from referrals route");
});

//-------------------------------- DATA ------------------------------------------

router.post('/v1/create_new_user', function (req, res) {
    /*

        There are two types of accounts that are distinguishable by their `type_of_account` field:
        1 = regular user account

            Only able to see data relating to themselves. Able to write data to their account.
            All accounts will be initially created with these level of permissions.

        2 = admin user account

            Able to see data for all accounts. Able to write data to any account.
            
        
        The following fields will be generated by default within this block of code:
            
            type_of_account             ==>     1
            user_number_of_absences     ==>     0
            user_token                  ==>     A signed JSON Web Token (JWT)
        
        
        The post request body must be of the form:
        {
            "username": "Example Username",
            "password": "Example Password",
            "groupCode": "aposdjhgfaaasdf"
        }
        
        The return object will contain the JWT and will take the form:

        {
            "jwt": signedToken
        }

    */

    var username = req.body.username;
    var password = req.body.password;
    var groupCode = req.body.groupCode;

    if ((typeof username !== 'undefined') && (typeof password !== 'undefined') && (typeof groupCode !== 'undefined') ) {

        // Generating the JWT
        var signedToken = generateJWT(username, password);

        var queryString = "SELECT * FROM `group_data` WHERE group_code = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [groupCode], function (err2, records1, fields1) {
                    if (!err2) {

                        if (records1.length == 1) {
                            queryString = "INSERT INTO `referral_user_data` (`user_index`, `group_code`, `type_of_account`, `username`, `password`, `user_first_name`, `user_last_name`, `user_email`, `user_phone_number`, `user_fax_number`, `user_website`, `profile_picture_file_path`, `user_number_of_absences`, `account_status`, `user_token`, `account_creation_date`) VALUES (NULL, ?, '1', ?, ?, NULL, NULL, NULL, NULL, NULL, NULL, 'https://www.nautilusdevelopment.ca/api/placeholder.png', '0', 'none', ?, CURRENT_TIMESTAMP);";

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [groupCode, username, password, signedToken], function (err4, records2, fields2) {
                                        if (!err4) {
                    
                                            var returnData = {
                                                "jwt": signedToken
                                            };
                    
                                            res.send(returnData);

                                        } else if (err4['sqlMessage'].includes("Duplicate entry")) {
                                            var returnData = {
                                                "jwt": "The username is already taken."
                                            };
                    
                                            res.send(returnData);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {

                            var returnData = {
                                "jwt": "The group code is invalid."
                            };
                            res.send(returnData);
                        }
                    }

                    conn1.release();
                });
            }
        });

    } else {
        var returnData = {
            "jwt": "There is an error within the post request."
        };
        res.send(returnData);
    }

});


router.post('/v1/authenticate', function (req, res) {
    /*
        This endpoint takes in the user's credentials and returns their unique JSON Web Token.

        The post request body must be of the form:
        {
            "username": "Example Username",
            "password": "Example Password"
        }
        
        The return object will contain the JWT and will take the form:

        {
            "jwt": signedToken
        }

    */

    var username = req.body.username;
    var password = req.body.password;

    if ((typeof username !== 'undefined') && (typeof password !== 'undefined') ) {

        var queryString = "SELECT `type_of_account`, `user_token` FROM `referral_user_data` WHERE username = ? AND password = ?;";
        pool.getConnection(function(err, conn) {
            if (err) {
                res.send(err);
                console.log(err);
            } else {
                conn.query(queryString, [username, password], function (err2, records, fields) {
                    if (!err2) {

                        if (records.length == 1) {

                            var returnData = {
                                "jwt": records[0]['user_token'],
                                "typeOfAccount": records[0]['type_of_account']
                            };
    
                            res.send(returnData);

                        } else {
                            res.send("The username or password is incorrect.")
                        }
                        
                    }

                    conn.release();
                });
            }
        });

    } else {
        res.send("Error within post request.")
    }

});


router.post('/v1/change_my_password', function (req, res) {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/change_my_password?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The post request body must be of the form:
        {
            "username": "username",
            "password": "password"
        }
        
        The return object will take the form:

        {
            "fieldCount": 0,
            "affectedRows": 1,
            "insertId": 0,
            "serverStatus": 2,
            "warningCount": 0,
            "message": "(Rows matched: 1  Changed: 1  Warnings: 0",
            "protocol41": true,
            "changedRows": 1
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var username = req.body.username;
    var password = req.body.password;

    if ((typeof jwt !== 'undefined') && (typeof username !== 'undefined') && (typeof password !== 'undefined')) {

        // Generating the JWT
        var newSignedToken = generateJWT(username, password);

        var queryString = "SELECT user_index, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            
                            // New query string
                            queryString = "UPDATE `referral_user_data` SET password = ?, user_token = ? WHERE user_index = ?;";

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [password, newSignedToken, userIndex], function (err4, records2, fields2) {
                                        if (!err4) {

                                            var returnData = {
                                                "jwt": newSignedToken
                                            };
                    
                                            res.send(returnData);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.post('/v1/update_user_information', function (req, res) {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/update_user_information?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The post request body must be of the form:
        {
            "userFirstName": "Example First Name",
            "userLastName": "Example Last Name",
            "userEmail": "example@email.ca",
            "userPhoneNumber": "6136136136",
            "userFaxNumber": "6136136136",
            "userWebsite": "examplewebsite.ca"
        }
        
        The return object will take the form:

        {
            "fieldCount": 0,
            "affectedRows": 1,
            "insertId": 0,
            "serverStatus": 2,
            "warningCount": 0,
            "message": "(Rows matched: 1  Changed: 1  Warnings: 0",
            "protocol41": true,
            "changedRows": 1
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var userFirstName = req.body.userFirstName;
    var userLastName = req.body.userLastName;
    var userEmail = req.body.userEmail;
    var userPhoneNumber = req.body.userPhoneNumber;
    var userFaxNumber = req.body.userFaxNumber;
    var userWebsite = req.body.userWebsite;

    
    if ((typeof jwt !== 'undefined') && (typeof userFirstName !== 'undefined') && (typeof userLastName !== 'undefined') && (typeof userEmail !== 'undefined') && (typeof userPhoneNumber !== 'undefined') && (typeof userFaxNumber !== 'undefined') && (typeof userWebsite !== 'undefined')) {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            
                            // New query string
                            queryString = "UPDATE `referral_user_data` SET user_first_name = ?, user_last_name = ?, user_email = ?, user_phone_number = ?, user_fax_number = ?, user_website = ? WHERE user_index = ?;";

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [userFirstName, userLastName, userEmail, userPhoneNumber, userFaxNumber, userWebsite, userIndex], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.post('/v1/edit_my_profile', function (req, res) {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/edit_my_profile?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The post request body must be of the form:
        {
            "userFirstName": "Example First Name",
            "userLastName": "Example Last Name",
            "username": "exampleusername",
            "userEmail": "example@email.ca",
            "userPhoneNumber": "6136136136",
            "userFaxNumber": "6136136136",
            "userWebsite": "examplewebsite.ca"
        }
        
        The return object will take the form:

        {
            "fieldCount": 0,
            "affectedRows": 1,
            "insertId": 0,
            "serverStatus": 2,
            "warningCount": 0,
            "message": "(Rows matched: 1  Changed: 1  Warnings: 0",
            "protocol41": true,
            "changedRows": 1
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var userFirstName = req.body.userFirstName;
    var userLastName = req.body.userLastName;
    var username = req.body.username;
    var userEmail = req.body.userEmail;
    var userPhoneNumber = req.body.userPhoneNumber;
    var userFaxNumber = req.body.userFaxNumber;
    var userWebsite = req.body.userWebsite;

    
    if ((typeof jwt !== 'undefined') && (typeof userFirstName !== 'undefined') && (typeof userLastName !== 'undefined') && (typeof userEmail !== 'undefined') && (typeof userPhoneNumber !== 'undefined') && (typeof userFaxNumber !== 'undefined') && (typeof userWebsite !== 'undefined')) {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            
                            // New query string
                            queryString = "UPDATE `referral_user_data` SET username = ?, user_first_name = ?, user_last_name = ?, user_email = ?, user_phone_number = ?, user_fax_number = ?, user_website = ? WHERE user_index = ?;";

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [username, userFirstName, userLastName, userEmail, userPhoneNumber, userFaxNumber, userWebsite, userIndex], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.get("/v1/get_my_profile_data", (req, res) => {
    /*
        This endpoint is for requesting the data of the current user

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/update_user_information?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg

        
        The return object will contain the users data in JSON form:
        [
            {
                "user_index": 3,
                "group_code": "adskgjasd"
                "user_first_name": "Echo",
                "user_last_name": "Foxtrot",
                "user_email": "echo.foxtrot@gmail.com",
                "user_phone_number": "1234567890",
                "user_fax_number": "1234567890",
                "user_website": "echofoxtrot.com",
                "profile_picture_file_path": "http://192.168.1.16:8081/1597792652538_echofoxtrot.png",
                "account_creation_date": "2020-08-18T19:17:32.000Z"
            }
        ]

    */

    // Parameters
    var jwt = req.query.jwt;

    if (typeof jwt !== 'undefined') {
    
        var queryString = "SELECT user_index, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            var userGroupCode = records1[0]['group_code'];
                            var userAccountType = records1[0]['type_of_account'];

                            queryString = "SELECT user_index, group_code, user_first_name, user_last_name, user_email, user_phone_number, user_fax_number, user_website, profile_picture_file_path, user_number_of_absences, account_creation_date FROM `referral_user_data` WHERE user_index = ? AND group_code = ?;";
                            
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [userIndex, userGroupCode], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }
    

});


router.get("/v1/get_user_data", (req, res) => {
    /*
        This endpoint is for requesting the data of a specific user

        The JSON Web Token and the user index must be a query parameter in the url
            Example: /api/v1/get_user_data?userIndex=1&jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg

        
        The return object will contain the users data in JSON form:
        [
            {
                "user_index": 3,
                "user_first_name": "Echo",
                "user_last_name": "Foxtrot",
                "user_email": "echo.foxtrot@gmail.com",
                "user_phone_number": "1234567890",
                "user_fax_number": "1234567890",
                "user_website": "echofoxtrot.com",
                "profile_picture_file_path": "http://192.168.1.16:8081/1597792652538_echofoxtrot.png",
                "user_number_of_absences": 3, (maybe)
                "account_creation_date": "2020-08-18T19:17:32.000Z"
            }
        ]

    */

    // Parameters
    var targetUserIndex = req.query.userIndex;
    var jwt = req.query.jwt;

    if ((typeof targetUserIndex !== 'undefined') || (typeof jwt !== 'undefined') ) {
    
        var queryString = "SELECT user_index, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var requestingUserIndex = records1[0]['user_index'];
                            var userGroupCode = records1[0]['group_code'];
                            var userAccountType = records1[0]['type_of_account'];

                            if ((requestingUserIndex == targetUserIndex) || (userAccountType == 2)) {
                                queryString = "SELECT user_index, user_first_name, user_last_name, user_email, user_phone_number, user_fax_number, user_website, profile_picture_file_path, user_number_of_absences, account_creation_date FROM `referral_user_data` WHERE user_index = ? AND group_code = ?;";
                            } else {
                                queryString = "SELECT user_index, user_first_name, user_last_name, user_email, user_phone_number, user_fax_number, user_website, profile_picture_file_path, account_creation_date FROM `referral_user_data` WHERE user_index = ? AND group_code = ?;";
                            }
                            
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [targetUserIndex, userGroupCode], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }
    

});


router.get("/v1/get_all_users_data", (req, res) => {
    /*
        This endpoint is for any user to get the general information of all other users in the group except for that of the requestor.

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/get_all_users_data?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg

    */

    // Parameters
    var jwt = req.query.jwt;
    
    if (typeof jwt !== 'undefined') {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            var userGroupCode = records1[0]['group_code'];
                            var userAccountType = records1[0]['type_of_account'];

                            if (userAccountType == 2) {
                                queryString = "SELECT user_index, user_first_name, user_last_name, user_email, user_phone_number, user_fax_number, user_website, profile_picture_file_path, user_number_of_absences, account_creation_date FROM `referral_user_data` WHERE user_index != ? AND group_code = ? ORDER BY user_first_name;";
                            } else {
                                queryString = "SELECT user_index, user_first_name, user_last_name, user_email, user_phone_number, user_fax_number, user_website, profile_picture_file_path, account_creation_date FROM `referral_user_data` WHERE user_index != ? AND group_code = ? ORDER BY user_first_name;";
                            }

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [userIndex, userGroupCode], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });
                            
                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.get("/v1/get_admin_data", (req, res) => {
    /*
        This endpoint is for any user to get the general information of all other users in the group except for that of the requestor.

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/get_admin_data?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg

    */

    // Parameters
    var jwt = req.query.jwt;
    
    if (typeof jwt !== 'undefined') {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            var userGroupCode = records1[0]['group_code'];
                            var userAccountType = records1[0]['type_of_account'];

                            if (userAccountType == 2) {
                                queryString = "SELECT user_index, user_first_name, user_last_name, user_email, user_phone_number, user_fax_number, user_website, profile_picture_file_path, user_number_of_absences, account_creation_date FROM `referral_user_data` WHERE type_of_account != 1 AND group_code = ? ORDER BY user_first_name;";
                            } else {
                                queryString = "SELECT user_index, user_first_name, user_last_name, user_email, user_phone_number, user_fax_number, user_website, profile_picture_file_path, account_creation_date FROM `referral_user_data` WHERE type_of_account != 1 AND group_code = ? ORDER BY user_first_name;";
                            }

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [userGroupCode], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });
                            
                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.post("/v1/update_absences", (req, res) => {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/update_absences?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg


        The post request body must be of the form:
        {
            "targetUserIndex": 1,
            "newNumberOfAbsences": 3
        }
        
        The return object will take the form:

        {
            "fieldCount": 0,
            "affectedRows": 1,
            "insertId": 0,
            "serverStatus": 2,
            "warningCount": 0,
            "message": "(Rows matched: 1  Changed: 1  Warnings: 0",
            "protocol41": true,
            "changedRows": 1
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var targetUserIndex = req.body.targetUserIndex;
    var newNumberOfAbsences = req.body.newNumberOfAbsences;
    
    if ((typeof jwt !== 'undefined') && (typeof targetUserIndex !== 'undefined') && (typeof newNumberOfAbsences !== 'undefined')) {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            var userGroupCode = records1[0]['group_code'];
                            var userAccountType = records1[0]['type_of_account'];
                            
                            if (userAccountType == 2) {
                                // New query string
                                queryString = "UPDATE `referral_user_data` SET user_number_of_absences = ? WHERE user_index = ? AND group_code = ?;";

                                pool.getConnection(function(err3, conn2) {
                                    if (err3) {
                                        res.send(err3);
                                        console.log(err3);
                                    } else {
                                        conn2.query(queryString, [newNumberOfAbsences, targetUserIndex, userGroupCode], function (err4, records2, fields2) {
                                            if (!err4) {
                                                res.send(records2);
                                            }
                        
                                            conn2.release();
                                        });
                                    }
                                });
                            } else {

                                var error = {
                                    "Error": "Authentication failed. Please try a different JSON Web Token."
                                };
                        
                                res.send(error);
                            }

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.post("/v1/upload_photo", upload.single('profilePicture'), (req, res) => {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/upload_photo?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg

        The post request must have the following header:
            Content-Type: multipart/form-data
        
        The key for the picture must be 'profilePicture'.

        { 
            fieldname: 'profilePicture',
            originalname: '12.jpg',
            encoding: '7bit',
            mimetype: 'image/jpeg',
            destination: 'uploads/',
            filename: 'b186f7e6afcd5fbc95665c2ad38812da',
            path: 'uploads/b186f7e6afcd5fbc95665c2ad38812da',
            size: 771037 
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var profilePictureFilePath = baseURL + req.file.filename;

    if (typeof profilePictureFilePath !== 'undefined') {
    
        var queryString = "SELECT user_index, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            var userAccountType = records1[0]['type_of_account'];
                            
                            // New query string
                            queryString = "UPDATE `referral_user_data` SET profile_picture_file_path = ? WHERE user_index = ?;";

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [profilePictureFilePath, userIndex], function (err4, records2, fields2) {
                                        if (!err4) {

                                            var returnData = {
                                                "profilePictureFilePath": profilePictureFilePath
                                            };
                    
                                            res.send(returnData);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }
    

});


router.post("/v1/create_referral", (req, res) => {
    /*    

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/create_referral?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg

        The post request body must be of the form:
        {
            "customerFirstName": "Example customer first name",
            "customerLastName": "Example customer last name",
            "customerPhoneNumber": "6136136133",
            "customerEmail": "example@example.com",
            "targetUserIndex": 2,
            "targetUserFirstName": "Example first name",
            "targetUserLastName": "Example last name",
            "targetUserProfilePictureFilePath": "/path/to/profile/picture"
        }
        
        The return object will contain the JWT and will take the form:

        {
            "fieldCount": 0,
            "affectedRows": 1,
            "insertId": 0,
            "serverStatus": 2,
            "warningCount": 0,
            "message": "(Rows matched: 1  Changed: 1  Warnings: 0",
            "protocol41": true,
            "changedRows": 1
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var customerFirstName = req.body.customerFirstName;
    var customerLastName = req.body.customerLastName;
    var customerPhoneNumber = req.body.customerPhoneNumber;
    var customerEmail = req.body.customerEmail;

    var targetUserIndex = req.body.targetUserIndex;
    var targetUserFirstName = req.body.targetUserFirstName;
    var targetUserLastName = req.body.targetUserLastName;
    var targetUserProfilePictureFilePath = req.body.targetUserProfilePictureFilePath;
    
    if ((typeof jwt !== 'undefined') && (typeof targetUserIndex !== 'undefined') && (typeof targetUserFirstName !== 'undefined') && (typeof targetUserLastName !== 'undefined') && (typeof customerFirstName !== 'undefined')) {
        var queryString = "SELECT user_index, user_first_name, user_last_name, profile_picture_file_path, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {
                        
                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            var userFirstName = records1[0]['user_first_name'];
                            var userLastName = records1[0]['user_last_name'];
                            var userProfilePictureFilePath = records1[0]['profile_picture_file_path'];
                            var userGroupCode = records1[0]['group_code'];
                            var userAccountType = records1[0]['type_of_account'];

                            queryString = "INSERT INTO `referral_data` (`referral_index`, `group_code`, `user_index`, `user_first_name`, `user_last_name`, `user_profile_picture_file_path`, `customer_first_name`, `customer_last_name`, `customer_phone_number`, `customer_email`, `target_user_index`, `target_user_first_name`, `target_user_last_name`, `target_user_profile_picture_file_path`, `status_of_referral`, `monetary_sum_gained`, `referral_creation_date`) VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'Waiting On Customer', NULL, CURRENT_TIMESTAMP);";
                            
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [userGroupCode, userIndex, userFirstName, userLastName, userProfilePictureFilePath, customerFirstName, customerLastName, customerPhoneNumber, customerEmail, targetUserIndex, targetUserFirstName, targetUserLastName, targetUserProfilePictureFilePath], function (err4, records2, fields2) {
                                        if (!err4) {

                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });
                            
                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.get("/v1/get_all_referral_data", (req, res) => {
    /*
        This endpoint is for any user to get the general information of all other users in the group except for that of the requestor.

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/update_user_information?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg

    */

    // Parameters
    var jwt = req.query.jwt;
    
    if (typeof jwt !== 'undefined') {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            var userGroupCode = records1[0]['group_code'];
                            var userAccountType = records1[0]['type_of_account'];

                            if (userAccountType == 2) {
                                queryString = "SELECT * FROM `referral_data` WHERE group_code = ? AND status_of_referral IN ('Waiting On Customer', 'Finished With Value', 'Finished Without Value') ORDER BY FIELD(status_of_referral, 'Waiting On Customer', 'Finished With Value', 'Finished Without Value');";
                                pool.getConnection(function(err3, conn2) {
                                    if (err3) {
                                        res.send(err3);
                                        console.log(err3);
                                    } else {
                                        conn2.query(queryString, [userGroupCode], function (err4, records2, fields2) {
                                            if (!err4) {
                                                res.send(records2);
                                            }
                        
                                            conn2.release();
                                        });
                                    }
                                });
                            } else {

                                var error = {
                                    "Error": "Authentication failed. Please try a different JSON Web Token."
                                };
                        
                                res.send(error);

                            }

                            
                            
                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.get("/v1/get_my_referrals", (req, res) => {
    /*
        This endpoint is for any user to get the general information of all other users in the group except for that of the requestor.

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/get_my_referrals?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg

    */

    // Parameters
    var jwt = req.query.jwt;
    
    if (typeof jwt !== 'undefined') {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            var userGroupCode = records1[0]['group_code'];
                            var userAccountType = records1[0]['type_of_account'];

                            // queryString = "SELECT * FROM `referral_data` WHERE user_index = ? AND group_code = ? AND status_of_referral IN ('Waiting On Customer', 'Finished With Value', 'Finished Without Value') ORDER BY FIELD(status_of_referral, 'Waiting On Customer', 'Finished With Value', 'Finished Without Value');";
                            queryString = "SELECT * FROM `referral_data` WHERE user_index = ? AND group_code = ? ORDER BY referral_index DESC;";
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [userIndex, userGroupCode], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });
                            
                            
                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.get("/v1/get_referrals_from_others", (req, res) => {
    /*
        This endpoint is for any user to get the general information of all other users in the group except for that of the requestor.

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/get_referrals_from_others?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg

    */

    // Parameters
    var jwt = req.query.jwt;
    
    if (typeof jwt !== 'undefined') {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            var userGroupCode = records1[0]['group_code'];
                            var userAccountType = records1[0]['type_of_account'];

                            // queryString = "SELECT * FROM `referral_data` WHERE target_user_index = ? AND group_code = ? AND status_of_referral IN ('Waiting On Customer', 'Finished With Value', 'Finished Without Value') ORDER BY FIELD(status_of_referral, 'Waiting On Customer', 'Finished With Value', 'Finished Without Value');";
                            queryString = "SELECT * FROM `referral_data` WHERE target_user_index = ? AND group_code = ? ORDER BY referral_index DESC;";
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [userIndex, userGroupCode], function (err4, records2, fields2) {
                                        if (!err4) {
                                            res.send(records2);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });
                            
                            
                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.get("/v1/get_my_stats", (req, res) => {
    /*
        This endpoint is for a user to get the statistics on their referrals gotten and recieved

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/get_my_referrals?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg

    */

    // Parameters
    var jwt = req.query.jwt;
    
    if (typeof jwt !== 'undefined') {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var myUserIndex = records1[0]['user_index'];
                            var userGroupCode = records1[0]['group_code'];
                            var userAccountType = records1[0]['type_of_account'];

                            queryString = "SELECT user_index, user_first_name, user_last_name, profile_picture_file_path FROM `referral_user_data` WHERE group_code = ? AND user_index != ?;";
                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [userGroupCode, myUserIndex], function (err4, records2, fields2) {
                                        if (!err4) {
                                            // We now have all of the users indices
                                            var statisticsData = [];
                                            var userData = records2;
                                            
                                            for (var i = 0; i < userData.length; i++) {
                                                var tempUserData = {
                                                    "userIndex": userData[i]['user_index'],
                                                    "userFirstName": userData[i]['user_first_name'],
                                                    "userLastName": userData[i]['user_last_name'],
                                                    "userProfilePictureFilePath": userData[i]['profile_picture_file_path'],
                                                    "referralsGiven": 0,
                                                    "referralsReceived": 0
                                                };
                                                statisticsData.push(tempUserData);
                                            }

                                            queryString = "SELECT * FROM `referral_data` WHERE group_code = ? AND (user_index = ? OR target_user_index = ?);"
                                            pool.getConnection(function(err5, conn3) {
                                                if (err5) {
                                                    res.send(err5);
                                                    console.log(err5);
                                                } else {
                                                    conn3.query(queryString, [userGroupCode, myUserIndex, myUserIndex], function (err6, records3, fields3) {
                                                        if (!err6) {
                                                            // We now have all of the referral data
                                                            var referralData = records3;
                                                            
                                                            for (i = 0; i < statisticsData.length; i++) {
                                                                var tempUserIndex = statisticsData[i]['userIndex'];
                                                                for (var j = 0; j < referralData.length; j++) {
                                                                    var tempReferralUserIndex = referralData[j]['user_index'];
                                                                    var tempReferralTargetUserIndex = referralData[j]['target_user_index'];
                                                                    if (tempUserIndex == tempReferralUserIndex) {
                                                                        
                                                                        var tempReferralsReceived = statisticsData[i]['referralsReceived'];
                                                                        statisticsData[i]['referralsReceived'] = tempReferralsReceived + 1;

                                                                    } else if (tempUserIndex == tempReferralTargetUserIndex) {
                                                                        
                                                                        var tempReferralsGiven = statisticsData[i]['referralsGiven'];
                                                                        statisticsData[i]['referralsGiven'] = tempReferralsGiven + 1;

                                                                    }
                                                                    
                                                                }
                                                            }

                                                            // console.log(statisticsData);
                                                            res.send(statisticsData);
                
                                                        }
                                    
                                                        conn3.release();
                                                    });
                                                }
                                            });

                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });
                            
                            
                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.post('/v1/update_customer_information', function (req, res) {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/update_customer_information?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The post request body must be of the form:
        {
            "referralIndex": 4,
            "customerFirstName": "Example Name",
            "customerLastName": "Example Name",
            "customerPhoneNumber": "6134062118",
            "customerEmail": "example@email.ca"
        }
        
        The return object will take the form:

        {
            "fieldCount": 0,
            "affectedRows": 1,
            "insertId": 0,
            "serverStatus": 2,
            "warningCount": 0,
            "message": "(Rows matched: 1  Changed: 1  Warnings: 0",
            "protocol41": true,
            "changedRows": 1
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var referralIndex = req.body.referralIndex;
    var customerFirstName = req.body.customerFirstName;
    var customerLastName = req.body.customerLastName;
    var customerPhoneNumber = req.body.customerPhoneNumber;
    var customerEmail = req.body.customerEmail;

    if ((typeof jwt !== 'undefined') && (typeof referralIndex !== 'undefined') && (typeof customerFirstName !== 'undefined') && (typeof customerLastName !== 'undefined') && (typeof customerPhoneNumber !== 'undefined') && (typeof customerEmail !== 'undefined')) {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            
                            // New query string
                            // queryString = "UPDATE `referral_user_data` SET username = ?, user_first_name = ?, user_last_name = ?, user_email = ?, user_phone_number = ?, user_fax_number = ?, user_website = ? WHERE user_index = ?;";
                            queryString = "SELECT user_index FROM referral_data WHERE referral_index = ?;";

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [referralIndex], function (err4, records2, fields2) {
                                        if (!err4) {
                                            
                                            if (records2[0]['user_index'] === userIndex) {
                                                // The user has the right to update this information

                                                queryString = "UPDATE referral_data SET customer_first_name = ?, customer_last_name = ?, customer_phone_number = ?, customer_email = ? WHERE referral_index = ?;";

                                                pool.getConnection(function(err5, conn3) {
                                                    if (err5) {
                                                        res.send(err5);
                                                        console.log(err5);
                                                    } else {
                                                        conn3.query(queryString, [customerFirstName, customerLastName, customerPhoneNumber, customerEmail, referralIndex], function (err6, records3, fields3) {
                                                            if (!err6) {
                                                                
                                                                res.send(records3);

                                                            }
                                        
                                                            conn3.release();
                                                        });
                                                    }
                                                });


                                            } else {

                                                var error = {
                                                    "Error": "This user does not have the permissions for this action."
                                                };
                                        
                                                res.send(error);

                                            }


                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.post('/v1/update_sum_gained', function (req, res) {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/update_sum_gained?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg
        
        The post request body must be of the form:
        {
            "referralIndex": 4,
            "sumGained": "242.32"
        }
        
        The return object will take the form:

        {
            "fieldCount": 0,
            "affectedRows": 1,
            "insertId": 0,
            "serverStatus": 2,
            "warningCount": 0,
            "message": "(Rows matched: 1  Changed: 1  Warnings: 0",
            "protocol41": true,
            "changedRows": 1
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var referralIndex = req.body.referralIndex;
    var sumGained = req.body.sumGained;
    
    if ((typeof jwt !== 'undefined') && (typeof referralIndex !== 'undefined') && (typeof sumGained !== 'undefined')) {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            
                            // New query string
                            // queryString = "UPDATE `referral_user_data` SET username = ?, user_first_name = ?, user_last_name = ?, user_email = ?, user_phone_number = ?, user_fax_number = ?, user_website = ? WHERE user_index = ?;";
                            queryString = "SELECT target_user_index FROM referral_data WHERE referral_index = ?;";

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [referralIndex], function (err4, records2, fields2) {
                                        if (!err4) {
                                            
                                            if (records2[0]['target_user_index'] === userIndex) {
                                                // The user has the right to update this information

                                                queryString = "UPDATE referral_data SET monetary_sum_gained = ?, status_of_referral = 'Finished With Value' WHERE referral_index = ?;";

                                                pool.getConnection(function(err5, conn3) {
                                                    if (err5) {
                                                        res.send(err5);
                                                        console.log(err5);
                                                    } else {
                                                        conn3.query(queryString, [sumGained, referralIndex], function (err6, records3, fields3) {
                                                            if (!err6) {
                                                                
                                                                res.send(records3);

                                                            }
                                        
                                                            conn3.release();
                                                        });
                                                    }
                                                });


                                            } else {

                                                var error = {
                                                    "Error": "This user does not have the permissions for this action."
                                                };
                                        
                                                res.send(error);

                                            }


                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.get("/v1/get_sums", (req, res) => {
    /*

        The JSON Web Token must be a query parameter in the url
            Example: /api/v1/get_sums?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg

    */

    // Parameters
    var jwt = req.query.jwt;
    
    if (typeof jwt !== 'undefined') {
        var queryString = "SELECT user_index, group_code, type_of_account FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userIndex = records1[0]['user_index'];
                            var userGroupCode = records1[0]['group_code'];
                            var userAccountType = records1[0]['type_of_account'];
                            
                            if (userAccountType == 2) {
                                // We know the user is an admin

                                queryString = "SELECT user_index, user_first_name, user_last_name, profile_picture_file_path FROM `referral_user_data` WHERE group_code = ?;";
                                pool.getConnection(function(err3, conn2) {
                                    if (err3) {
                                        res.send(err3);
                                        console.log(err3);
                                    } else {
                                        conn2.query(queryString, [userGroupCode], function (err4, records2, fields2) {
                                            if (!err4) {
                                                // We now have all of the users indices
                                                var sumData = [];
                                                var userData = records2;
                                                
                                                for (var i = 0; i < userData.length; i++) {
                                                    var tempUserData = {
                                                        "userIndex": userData[i]['user_index'],
                                                        "userFirstName": userData[i]['user_first_name'],
                                                        "userLastName": userData[i]['user_last_name'],
                                                        "userProfilePictureFilePath": userData[i]['profile_picture_file_path'],
                                                        "totalGivenSum": 0,
                                                        "totalReceivedSum": 0
                                                    };
                                                    sumData.push(tempUserData);
                                                }

                                                queryString = "SELECT * FROM `referral_data` WHERE group_code = ?;"
                                                pool.getConnection(function(err5, conn3) {
                                                    if (err5) {
                                                        res.send(err5);
                                                        console.log(err5);
                                                    } else {
                                                        conn3.query(queryString, [userGroupCode], function (err6, records3, fields3) {
                                                            if (!err6) {
                                                                // We now have all of the referral data
                                                                var referralData = records3;
                                                                
                                                                for (i = 0; i < referralData.length; i++) {

                                                                    var tempSumGained = referralData[i]['monetary_sum_gained'];

                                                                    if (tempSumGained != null) {
                                                                        var tempGiverUserIndex = referralData[i]['user_index'];
                                                                        var tempReceiverUserIndex = referralData[i]['target_user_index'];

                                                                        for (var j = 0; j < sumData.length; j++) {
                                                                            if (sumData[j]['userIndex'] == tempGiverUserIndex) {
                                                                                sumData[j]['totalGivenSum'] = sumData[j]['totalGivenSum'] + tempSumGained;
                                                                            } else if (sumData[j]['userIndex'] == tempReceiverUserIndex) {
                                                                                sumData[j]['totalReceivedSum'] = sumData[j]['totalReceivedSum'] + tempSumGained;
                                                                            }
                                                                        }

                                                                    }

                                                                }

                                                                res.send(sumData);
                    
                                                            }
                                        
                                                            conn3.release();
                                                        });
                                                    }
                                                });

                                            }
                        
                                            conn2.release();
                                        });
                                    }
                                });
                            } else {

                                var error = {
                                    "Error": "Authentication failed. Please try a different JSON Web Token."
                                };
                        
                                res.send(error);
                            }

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }

});


router.post("/v1/report_to_developer", (req, res) => {
    /*
        This endpoint is for reporting a message to the developer

        The JSON Web Token must be a query parameter in the url
            Example: /api/referrals/v1/report_to_developer?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3RfdXNlcm5hbWUifQ.xi2EmVoAIHkbvRLFHACpZYdFC1amcpMaezxCvG5BYGg


        The post request body must be of the form:
        {
            "message": "This is an example message."
        }

        The return object will take the form:

        {
            "fieldCount": 0,
            "affectedRows": 1,
            "insertId": 0,
            "serverStatus": 2,
            "warningCount": 0,
            "message": "(Rows matched: 1  Changed: 1  Warnings: 0",
            "protocol41": true,
            "changedRows": 1
        }

    */

    // Parameters
    var jwt = req.query.jwt;

    var userMessage = req.body.message;

    if ((typeof jwt !== 'undefined') && (typeof userMessage !== 'undefined')) {
    
        var queryString = "SELECT user_index, user_first_name, user_last_name, user_email FROM `referral_user_data` WHERE user_token = ?;";
        pool.getConnection(function(err1, conn1) {
            if (err1) {
                res.send(err1);
                console.log(err1);
            } else {
                conn1.query(queryString, [jwt], function (err2, records1, fields1) {
                    
                    if (!err2) {

                        if (records1.length == 1) {
                            
                            var userFirstName = records1[0]['user_first_name'];
                            var userLastName = records1[0]['user_last_name'];
                            var userEmail = records1[0]['user_email'];

                            queryString = "INSERT INTO `referral_report_data` (`message_index`, `user_first_name`, `user_last_name`, `user_email`, `message`, `message_creation_date`) VALUES (NULL, ?, ?, ?, ?, CURRENT_TIMESTAMP);";

                            pool.getConnection(function(err3, conn2) {
                                if (err3) {
                                    res.send(err3);
                                    console.log(err3);
                                } else {
                                    conn2.query(queryString, [userFirstName, userLastName, userEmail, userMessage], function (err4, records2, fields2) {
                                        if (!err4) {
                    
                                            res.send(records2);

                                        } else {
                                            res.send(err4);
                                            console.log(err4);
                                        }
                    
                                        conn2.release();
                                    });
                                }
                            });

                        } else {
                            
                            var error = {
                                "Error": "Authentication failed. Please try a different JSON Web Token."
                            };
                    
                            res.send(error);

                        }
                    }

                    conn1.release();

                });
            }

            
        });

    } else {
        res.send("Error within post request.")
    }
    

});


// ============================ HELPER FUNCTIONS =============================

function generateJWT(username, password) {

    var header = {
        "alg": "HS256",
        "typ": "JWT"
    };
      
    var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));
    var encodedHeader = base64url(stringifiedHeader);

    var data = {
        "username": username
    }

    var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));
    var encodedData = base64url(stringifiedData);
      
    var token = encodedHeader + "." + encodedData;

    var signature = CryptoJS.HmacSHA256(token, password);
    signature = base64url(signature);

    var signedToken = token + "." + signature;

    return signedToken;

}


function base64url(source) {
    // Encode in classical base64
    encodedSource = CryptoJS.enc.Base64.stringify(source);

    // Remove padding equal characters
    encodedSource = encodedSource.replace(/=+$/, '');

    // Replace characters according to base64url specifications
    encodedSource = encodedSource.replace(/\+/g, '-');
    encodedSource = encodedSource.replace(/\//g, '_');

    return encodedSource;
}


pool.query = util.promisify(pool.query);

module.exports = pool;

module.exports = router;